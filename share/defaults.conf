#
# thomas@linuxmuster.net
# 24.01.2013
# GPL v3
#
# Contains variables used by migrations scripts. Don't change.
#
# migration specific environment
MIGCONFDIR="$SYSCONFDIR/migration"
MIGDATADIR="$DATADIR/migration"
MIGBACKLOG="$LOGDIR/migration-backup.log"
MIGRESTLOG="$LOGDIR/migration-restore.log"
MIGEXSYSTEM="$MIGDATADIR/exclude.conf"
MIGEXUSER="$MIGCONFDIR/exclude.conf"
MIGINSYSTEM="$MIGDATADIR/include.conf"
MIGINUSER="$MIGCONFDIR/include.conf"
INCONFTMP=/tmp/migration.include.conf.$$
INCONFILTERED=/tmp/migration.include.conf.filtered.$$
EXCONFTMP=/tmp/migration.exclude.conf.$$
INPARAM="--files-from=$INCONFILTERED"
EXPARAM="--exclude-from=$EXCONFTMP"
NFSTEMPDIRS="/ /var/tmp /home"

# base configuration variables used at backup and restore, don't change
BASEDATA="schoolname sambasid location country state workgroup domainname
          servername internsubrange"

# name of file which stores the base configuration variables
BASEDATAFILE="linuxmuster-base.data"

# allowed subranges for internal net
SUBRANGES="16-31 32-47 48-63 64-79 80-95 96-111 112-127 128-143 144-159 160-175
           176-191 192-207 208-223 224-239"

# supported versions for backup
BACKUPVERSIONS="4.0.6 5.0.0 5.0.1 5.0.2 5.0.3 5.0.4 5.1.0"

# versions supported for restore
RESTOREVERSIONS="6.0"

# name of ldap's dump file
LDIF="ldap.ldif"

# name of the files backup folder
BACKUPFOLDER="filesystem"

# name of the issue file
ISSUE="issue"

# name of the mysql metadata dump file
MYSQLMETA="mysql.metadata"

# name of the postgresql metadata dump file
PGSQLMETA="pgsql.metadata"

# name of the file which stores the package selections
SELECTIONS="selections"

# filter this packages out
PKGFILTER="acpi ark arts atftpd atlantik avahi busybox console cpp cups cyrus \
           db4.6-util dbus dcop debian-archive-keyring dhcp doc-debian enscript \
           esound-common font gcc grub hicolor-icon-theme initscripts \
           installation-report iceweasel ifupdown iodbc kbd kdelibs ksysguard \
           lib linux-image linux-headers linuxmuster-schulkonsole-templates \
           linux-base linux-kbuild linuxmuster-indexpage lzma menu-xdg moodle \
           mysql ncurses noatun odbc openbsd-inetd openntpd oss-compat perl-suid \
           pkipplib pmount poppler postgresql python radiusclient recode ruby \
           superkaramba svgalibg1 tcl8 tk8 tex uml-utilities uucp webmin \
           xulrunner yui"

# list of supported filesystems on the backup medium
# "ext2/ext3" includes also ext4
SUPPORTEDFS="ext2/ext3 reiserfs xfs nfs"

# list of services which will be shutted down during filesystem backup
SERVICES="apache2 atftpd tftpd-hpa bind9 cron cyrus2.2 dhcp3-server freeradius
          isc-dhcp-server linbo-bittorrent linbo-multicast mysql nagios3 nmbd
          nscd postfix rsync samba smbd slapd saslauthd"

# flag which will be created if custom.conf values are set
CUSTOMFLAG=".custom"

# name of firewall backup archive
FWARCHIVE="firewall.tar.gz"

# name of firewall's network settings file
FWSETTINGS="firewall.ethernet.settings"

# name of file which stores the firewall type (ipcop|ipfire)
FWTYPE="fwtype"

# name of file which stores the amount of quota partitions
QUOTAPARTS="quotaparts"

# get current firewall
if ssh -oNumberOfPasswordPrompts=0 -oStrictHostKeyChecking=no -p222 $ipcopip "echo 'Passwordless ssh connection to Firewall is available. :-)'"; then
 for i in ipcop ipfire; do
  if ssh -p 222 $ipcopip ls /var/$i &> /dev/null; then
   CURRENTFW=$i
   break
  fi
 done
fi
if [ -z "$CURRENTFW" ]; then
 echo "Cannot connect to firewall. Assuming custom firewall!"
 sleep 5
 CURRENTFW=custom
fi


# functions

# exit with error
error(){
 local msg="$1"
 [ -n "$msg" ] && echo "$msg"
 rm -f "$EXCONFTMP"
 rm -f "$INCONFTMP"
 rm -f "$INCONFILTERED"
 exit 1
}

# concenate system and user configs
concenate_configs(){
 echo -n "Merging system and user configs:"
 local usertest=""
 # merging excludes
 cp "$MIGEXSYSTEM" "$EXCONFTMP" || return 1
 cat "$MIGEXUSER" >> "$EXCONFTMP" || return 1
 # merging includes
 grep ^/ "$MIGINSYSTEM" > "$INCONFTMP" || return 1
 usertest="$(grep ^/ "$MIGINUSER")"
 if [ -n "$usertest" ]; then
  grep ^/ "$MIGINUSER" >> "$INCONFTMP" || return 1
 fi
 echo " OK!"
 return 0
}

# check if source dir is on nfs share
nfs_check(){
 FSTYPE="$(stat -f -c %T $SOURCEDIR)"
 if [ "$FSTYPE" = "nfs" ]; then
  grep nfs /proc/mounts | while read NFSSHARE NFSMNTDIR NFSTYPE relax; do
   if stringinstring "$NFSMNTDIR" "$SOURCEDIR"; then
    echo "$NFSSHARE $NFSMNTDIR $NFSTYPE"
    return 0
   fi
  done
 fi
 return 1
}

# unmount nfs share
umount_nfs(){
 if [ -n "$NFSTYPE" ]; then
  cd "$SOURCEDIR"
  if ! umount "$NFSMNTDIR"; then
   lsof | grep "$NFSMNTDIR"
   error "Cannot unmount $NFSSHARE!"
  fi
 fi
}

