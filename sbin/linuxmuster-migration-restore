#!/bin/bash
#
# thomas@linuxmuster.net
# 06.10.2015
# GPL v3
#


# read paedml specific environment
. /usr/share/linuxmuster/config/dist.conf || exit 1
. $HELPERFUNCTIONS || exit 1
. $DATADIR/migration/defaults.conf || exit 1


# print help
usage(){
 echo
 echo "Usage: `basename $0` <options>"
 echo
 echo "Options:"
 echo
 echo " -c <config dir>     Path to directory with config files (optional)."
 echo "                     Per default we look in source dir for them."
 echo " -d <source dir>     Path to source directory (mandatory,"
 echo "                     where the restore files live)."
 echo " -i <password>       Firewall root password (optional). If not given you"
 echo "                     will be asked for it."
 echo " -o <password>       Opsi root password (optional). If not given you"
 echo "                     will be asked for it if Opsi is configured."
 echo " -t <temp dir>       Path to directory where the restore files are"
 echo "                     temporarily stored in case the source dir is on a"
 echo "                     nfs share (optional, must exist)."
 echo " -h                  Show this help."
 exit 1
}


# parse commandline arguments
while getopts ":c:d:hi:o:t:" opt; do
 case $opt in
  c) ALTCONFDIR="$OPTARG" ;;
  d) SOURCEDIR="$OPTARG" ;;
  i) ipcoppw="$OPTARG" ;;
  o) opsipw="$OPTARG" ;;
  t) NFSTMPDIR="$OPTARG" ;;
  h) usage ;;
  \?) echo "Invalid option: -$OPTARG" >&2
      usage ;;
  :) echo "Option -$OPTARG requires an argument." >&2
     usage ;;
 esac
done


# check args
[ -z "$SOURCEDIR" ] && usage
[ -d "$SOURCEDIR" ] || usage
if [ -n "$ALTCONFDIR" ]; then
 [ -d "$ALTCONFDIR" ] || usage
fi
if [ -n "$NFSTMPDIR" ]; then
 [ -d "$NFSTMPDIR" ] || usage
fi


# delete old logfile
rm -f "$MIGRESTLOG"

# logging
exec >>$MIGRESTLOG 2>&1

# print script header info
echo
echo "####"
echo "#### Starting restore of migration data"
echo "#### Sourcedir: $SOURCEDIR"
echo "#### Configdir: $MIGCONFDIR"
[ -n "$NFSTMPDIR" ] && echo "#### NFS-Tempdir: $NFSTMPDIR"
echo "#### `date`"
echo "####"

# nfs check
RET="$(nfs_check)"
if [ -n "$RET" ]; then
 NFSSHARE="$(echo "$RET" | awk '{ print $1 }')"
 NFSMNTDIR="$(echo "$RET" | awk '{ print $2 }')"
 NFSTYPE="$(echo "$RET" | awk '{ print $3 }')"

 if [ -n "$NFSSHARE" -a -n "$NFSMNTDIR" -a -n "$NFSTYPE" ]; then
  echo "$NFSTYPE filesystem $NFSSHARE is mounted on $NFSMNTDIR."
 else
  echo "NFSSHARE:  $NFSSHARE"
  echo "NFSMNTDIR: $NFSMNTDIR"
  echo "NFSTYPE:   $NFSTYPE"
  error "NFS error!"
 fi
fi


# if source is on nfs copy files to a local filesystem
if [ -n "$NFSTYPE" ]; then

 # compute needed space on local filesystem
 ssum="$(du -sk "$SOURCEDIR" | awk '{ print $1 }')"
 # add 200 mb to size to be sure it fits
 ssum=$(( $ssum + 200000 ))
 # if a tmp dir was given on cmdline use this or iterate over NFSTEMPDIRS defined in defaults.conf
 [ -n "$NFSTMPDIR" ] && NFSTEMPDIRS="$NFSTMPDIR"
 # check for enough free space on the local filesystem
 for i in $NFSTEMPDIRS; do
  freespace="$(df -P $i | tail -1 | awk '{ print $4 }')"
  if [ $freespace -gt $ssum ]; then
   LOCALSRCDIR="$i/migration.tmp"
   [ "$i" = "/" ] && LOCALSRCDIR="/migration.tmp"
   [ -n "$NFSTMPDIR" ] && LOCALSRCDIR="$NFSTMPDIR"
   break
  fi
 done

 if [ -z "$LOCALSRCDIR" ]; then
  error "There is not enough free space on the local filesystem! About $(( $ssum / 1024 )) MB are needed."
 fi

 mkdir -p "$LOCALSRCDIR"
 echo -n "Copying about $(( $ssum / 1024 )) MB data to $LOCALSRCDIR ... be patient ..."
 RC=0
 rsync -a -v --delete "$SOURCEDIR/" "$LOCALSRCDIR/" || RC=1
 if [ "$RC" = "0" ]; then
  echo " OK!"
 else
  rm -rf "$LOCALSRCDIR"
  error " Failed!"
 fi

 SOURCEDIR="$LOCALSRCDIR"
 umount_nfs

fi


# update paths
if [ -n "$ALTCONFDIR" ]; then
 MIGCONFDIR="$ALTCONFDIR"
else
 MIGCONFDIR="$SOURCEDIR"
fi
cd "$SOURCEDIR"


# concenate config files
MIGEXUSER="$MIGCONFDIR/exclude.conf"
MIGINUSER="$MIGCONFDIR/include.conf"
concenate_configs || error " Failed!"
[ -n "$NFSTYPE" ] && echo "$SOURCEDIR" >> "$EXCONFTMP"


# check for custom.conf and read it
if [ -s "$MIGCONFDIR/custom.conf" ]; then
 echo -n "Reading $MIGCONFDIR/custom.conf ..."
 if . "$MIGCONFDIR/custom.conf"; then
  echo " OK!"
 else
  error " Failed!"
 fi
fi


# keep old internsubrange, we need it later if it has to be changed during migration
internsubrange_old="$(echo get linuxmuster-base/internsubrange | debconf-communicate | awk '{ print $2 }')"
[ -z "$internsubrange_old" ] && error "Cannot get internsubrange value from debconf!"


# source restore script
. "$MIGDATADIR/linuxmuster-migration-restore.sh" 2>&1
cp "$MIGRESTLOG" "$SOURCEDIR"


# clean up
rm -f "$EXCONFTMP"
rm -f "$INCONFTMP"
rm -f "$INCONFILTERED"
cd ~
# remove nfs tempdir if no tempdir was set on cmdline
[ -n "$NFSTYPE" -a -z "$NFSTMPDIR" ] && rm -rf "$SOURCEDIR"

